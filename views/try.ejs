<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Wave Hero</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow-x: hidden;
            background: #ffffff;
            color: #2d3748;
        }

        .hero-section {
            height: 100vh;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #ffffff 0%, #f7fafc 30%, #edf2f7 100%);
            overflow: hidden;
            cursor: none;
        }

        .wave-grid {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: grid;
            grid-template-columns: repeat(auto-fill, 40px);
            grid-template-rows: repeat(auto-fill, 40px);
            gap: 3px;
            z-index: 1;
            padding: 20px;
        }

        .wave-block {
            width: 40px;
            height: 40px;
            background: rgba(251, 207, 232, 0.3);
            border-radius: 12px;
            transition: all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            border: 1px solid rgba(251, 207, 232, 0.4);
            position: relative;
            transform-origin: center;
        }

        .wave-block::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 8px;
            height: 8px;
            background: rgba(236, 72, 153, 0.6);
            border-radius: 50%;
            transform: translate(-50%, -50%) scale(0);
            transition: all 0.4s ease;
        }

        .wave-block.wave-1 { 
            background: rgba(251, 207, 232, 0.7);
            transform: scale(1.3) rotate(5deg);
            box-shadow: 0 8px 25px rgba(236, 72, 153, 0.3);
            border-color: rgba(236, 72, 153, 0.6);
        }

        .wave-block.wave-2 { 
            background: rgba(244, 114, 182, 0.6);
            transform: scale(1.2) rotate(-3deg);
            box-shadow: 0 6px 20px rgba(244, 114, 182, 0.4);
        }

        .wave-block.wave-3 { 
            background: rgba(236, 72, 153, 0.7);
            transform: scale(1.4) rotate(8deg);
            box-shadow: 0 10px 30px rgba(236, 72, 153, 0.4);
        }

        .wave-block.wave-4 { 
            background: rgba(219, 39, 119, 0.6);
            transform: scale(1.1) rotate(-5deg);
            box-shadow: 0 5px 15px rgba(219, 39, 119, 0.3);
        }

        .wave-block.wave-5 { 
            background: rgba(190, 24, 93, 0.5);
            transform: scale(1.25) rotate(10deg);
            box-shadow: 0 7px 20px rgba(190, 24, 93, 0.3);
        }

        .wave-block.active::before {
            transform: translate(-50%, -50%) scale(1);
        }

        .wave-block.mouse-influence {
            background: rgba(236, 72, 153, 0.8);
            transform: scale(1.5) rotate(15deg);
            box-shadow: 0 15px 40px rgba(236, 72, 153, 0.5);
            border-color: rgba(236, 72, 153, 0.8);
            z-index: 2;
        }

        .wave-block.mouse-influence::before {
            transform: translate(-50%, -50%) scale(1.5);
            background: rgba(255, 255, 255, 0.9);
        }

        .hero-content {
            text-align: center;
            z-index: 10;
            position: relative;
            max-width: 900px;
            padding: 0 20px;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(20px);
            border-radius: 30px;
            border: 2px solid rgba(251, 207, 232, 0.3);
            box-shadow: 0 25px 80px rgba(236, 72, 153, 0.1);
            padding: 80px 50px;
        }

        .hero-title {
            font-size: 5rem;
            font-weight: 900;
            margin-bottom: 2rem;
            background: linear-gradient(135deg, #ec4899, #be185d, #ec4899, #f472b6);
            background-size: 300% 300%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: gradientWave 4s ease-in-out infinite;
            letter-spacing: -3px;
            line-height: 1.1;
        }

        @keyframes gradientWave {
            0%, 100% {
                background-position: 0% 50%;
            }
            33% {
                background-position: 100% 50%;
            }
            66% {
                background-position: 50% 100%;
            }
        }

        .hero-subtitle {
            font-size: 1.5rem;
            margin-bottom: 3rem;
            color: #64748b;
            line-height: 1.8;
            font-weight: 400;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

        .cta-group {
            display: flex;
            gap: 25px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .cta-button {
            display: inline-block;
            padding: 20px 50px;
            background: linear-gradient(135deg, #ec4899, #be185d);
            color: white;
            text-decoration: none;
            border-radius: 50px;
            font-size: 1.2rem;
            font-weight: 600;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(236, 72, 153, 0.3);
        }

        .cta-button.secondary {
            background: transparent;
            color: #ec4899;
            border: 2px solid #ec4899;
            box-shadow: none;
        }

        .cta-button:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 20px 50px rgba(236, 72, 153, 0.4);
        }

        .cta-button.secondary:hover {
            background: #ec4899;
            color: white;
        }

        .mouse-cursor {
            position: fixed;
            width: 30px;
            height: 30px;
            background: rgba(236, 72, 153, 0.8);
            border: 3px solid rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            pointer-events: none;
            z-index: 9999;
            transition: all 0.1s ease;
            box-shadow: 0 0 30px rgba(236, 72, 153, 0.6);
        }

        .mouse-cursor.active {
            transform: scale(1.8);
            background: rgba(236, 72, 153, 1);
            box-shadow: 0 0 40px rgba(236, 72, 153, 0.8);
        }

        .content-section {
            padding: 120px 20px;
            max-width: 1200px;
            margin: 0 auto;
            text-align: center;
            background: #ffffff;
        }

        .content-section h2 {
            font-size: 3.5rem;
            margin-bottom: 2rem;
            color: #2d3748;
            font-weight: 800;
        }

        .content-section p {
            font-size: 1.4rem;
            line-height: 1.8;
            color: #64748b;
            margin-bottom: 4rem;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 3rem;
            margin-top: 5rem;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.8);
            padding: 3rem 2.5rem;
            border-radius: 25px;
            border: 2px solid rgba(251, 207, 232, 0.3);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 15px 50px rgba(236, 72, 153, 0.1);
        }

        .feature-card:hover {
            transform: translateY(-15px);
            box-shadow: 0 30px 80px rgba(236, 72, 153, 0.2);
            border-color: rgba(236, 72, 153, 0.4);
        }

        .feature-card h3 {
            color: #ec4899;
            margin-bottom: 1.5rem;
            font-size: 2rem;
            font-weight: 700;
        }

        .feature-card p {
            color: #64748b;
            font-size: 1.1rem;
            line-height: 1.6;
            margin-bottom: 0;
        }

        @media (max-width: 768px) {
            .hero-title {
                font-size: 3.5rem;
            }
            
            .hero-content {
                padding: 60px 40px;
            }
            
            .wave-grid {
                grid-template-columns: repeat(auto-fill, 30px);
                grid-template-rows: repeat(auto-fill, 30px);
                gap: 2px;
                padding: 10px;
            }
            
            .wave-block {
                width: 30px;
                height: 30px;
            }
        }

        .wave-trail {
            position: absolute;
            width: 6px;
            height: 6px;
            background: rgba(236, 72, 153, 0.8);
            border-radius: 50%;
            pointer-events: none;
            z-index: 3;
            animation: trailFade 1s ease-out forwards;
        }

        @keyframes trailFade {
            0% {
                opacity: 1;
                transform: scale(1);
            }
            100% {
                opacity: 0;
                transform: scale(0);
            }
        }
    </style>
</head>
<body>
    <div class="mouse-cursor" id="cursor"></div>
    
    <section class="hero-section" id="hero">
        <div class="wave-grid" id="waveGrid"></div>
        
        <div class="hero-content">
            <h1 class="hero-title">Wave Dynamics</h1>
            <p class="hero-subtitle">Experience the mesmerizing flow of interactive wave patterns that respond to your every movement, creating a beautiful symphony of motion and color</p>
            <div class="cta-group">
                <a href="#content" class="cta-button">Explore Waves</a>
                <a href="#content" class="cta-button secondary">Learn More</a>
            </div>
        </div>
    </section>

    <section class="content-section" id="content">
        <h2>Interactive Wave Technology</h2>
        <p>Our advanced wave system creates stunning visual experiences through intelligent motion algorithms, responsive design patterns, and smooth performance optimization.</p>
        
        <div class="features-grid">
            <div class="feature-card">
                <h3>🌊 Dynamic Waves</h3>
                <p>Beautiful wave patterns that flow across the screen with multiple animation types including linear, circular, and spiral movements with perfect timing.</p>
            </div>
            <div class="feature-card">
                <h3>🎯 Mouse Interaction</h3>
                <p>Responsive blocks that react to mouse proximity with smooth scaling, rotation, and color transitions creating an immersive interactive experience.</p>
            </div>
            <div class="feature-card">
                <h3>🎨 Visual Appeal</h3>
                <p>Clean white background with gradient accents and light pink wave blocks that create a modern, elegant, and visually striking design.</p>
            </div>
            <div class="feature-card">
                <h3>⚡ Smooth Performance</h3>
                <p>Optimized animations with efficient rendering, smart throttling, and performance monitoring ensure buttery smooth 60fps experience.</p>
            </div>
        </div>
    </section>

    <script>
        // Custom cursor
        const cursor = document.getElementById('cursor');
        const hero = document.getElementById('hero');
        let mouseX = 0, mouseY = 0;
        let isMouseDown = false;

        // Update cursor position
        document.addEventListener('mousemove', (e) => {
            mouseX = e.clientX;
            mouseY = e.clientY;
            cursor.style.left = mouseX + 'px';
            cursor.style.top = mouseY + 'px';
        });

        document.addEventListener('mousedown', () => {
            isMouseDown = true;
            cursor.classList.add('active');
        });

        document.addEventListener('mouseup', () => {
            isMouseDown = false;
            cursor.classList.remove('active');
        });

        // Wave grid setup
        const waveGrid = document.getElementById('waveGrid');
        const blocks = [];
        let gridCols, gridRows;

        function createWaveGrid() {
            waveGrid.innerHTML = '';
            blocks.length = 0;
            
            const heroRect = hero.getBoundingClientRect();
            gridCols = Math.ceil(heroRect.width / 43);
            gridRows = Math.ceil(heroRect.height / 43);
            
            for (let row = 0; row < gridRows; row++) {
                for (let col = 0; col < gridCols; col++) {
                    const block = document.createElement('div');
                    block.classList.add('wave-block');
                    block.dataset.row = row;
                    block.dataset.col = col;
                    waveGrid.appendChild(block);
                    blocks.push({
                        element: block,
                        row: row,
                        col: col,
                        x: col * 43 + 20,
                        y: row * 43 + 20
                    });
                }
            }
        }

        // Wave patterns
        const waveColors = ['wave-1', 'wave-2', 'wave-3', 'wave-4', 'wave-5'];
        let waveActive = false;

        // Linear wave
        function createLinearWave(direction = 'right', speed = 80) {
            if (waveActive) return;
            waveActive = true;
            
            const colorClass = waveColors[Math.floor(Math.random() * waveColors.length)];
            let startCol = direction === 'right' ? 0 : gridCols - 1;
            let endCol = direction === 'right' ? gridCols - 1 : 0;
            let step = direction === 'right' ? 1 : -1;
            
            for (let col = startCol; direction === 'right' ? col <= endCol : col >= endCol; col += step) {
                setTimeout(() => {
                    blocks.forEach(block => {
                        if (block.col === col) {
                            block.element.classList.add('active', colorClass);
                            
                            setTimeout(() => {
                                block.element.classList.remove('active', colorClass);
                            }, 800);
                        }
                    });
                    
                    if (col === endCol) {
                        setTimeout(() => {
                            waveActive = false;
                        }, 800);
                    }
                }, Math.abs(col - startCol) * speed);
            }
        }

        // Circular wave
        function createCircularWave(centerRow, centerCol, speed = 100) {
            if (waveActive) return;
            waveActive = true;
            
            const colorClass = waveColors[Math.floor(Math.random() * waveColors.length)];
            const maxRadius = Math.max(gridRows, gridCols);
            
            for (let radius = 0; radius <= maxRadius; radius++) {
                setTimeout(() => {
                    blocks.forEach(block => {
                        const distance = Math.sqrt(
                            Math.pow(block.row - centerRow, 2) + 
                            Math.pow(block.col - centerCol, 2)
                        );
                        
                        if (Math.abs(distance - radius) < 1.5) {
                            block.element.classList.add('active', colorClass);
                            
                            setTimeout(() => {
                                block.element.classList.remove('active', colorClass);
                            }, 1200);
                        }
                    });
                    
                    if (radius === maxRadius) {
                        setTimeout(() => {
                            waveActive = false;
                        }, 1200);
                    }
                }, radius * speed);
            }
        }

        // Spiral wave
        function createSpiralWave(centerRow, centerCol, speed = 50) {
            if (waveActive) return;
            waveActive = true;
            
            const colorClass = waveColors[Math.floor(Math.random() * waveColors.length)];
            const points = [];
            
            // Generate spiral points
            for (let angle = 0; angle < 8 * Math.PI; angle += 0.2) {
                const radius = angle * 2;
                const x = centerCol + Math.cos(angle) * radius;
                const y = centerRow + Math.sin(angle) * radius;
                
                if (x >= 0 && x < gridCols && y >= 0 && y < gridRows) {
                    points.push({ row: Math.round(y), col: Math.round(x) });
                }
            }
            
            points.forEach((point, index) => {
                setTimeout(() => {
                    blocks.forEach(block => {
                        if (block.row === point.row && block.col === point.col) {
                            block.element.classList.add('active', colorClass);
                            
                            setTimeout(() => {
                                block.element.classList.remove('active', colorClass);
                            }, 1000);
                        }
                    });
                    
                    if (index === points.length - 1) {
                        setTimeout(() => {
                            waveActive = false;
                        }, 1000);
                    }
                }, index * speed);
            });
        }

        // Mouse influence on blocks
        function updateMouseInfluence() {
            if (!hero.matches(':hover')) return;
            
            const heroRect = hero.getBoundingClientRect();
            const relativeX = mouseX - heroRect.left;
            const relativeY = mouseY - heroRect.top;
            
            blocks.forEach(block => {
                const distance = Math.sqrt(
                    Math.pow(block.x - relativeX, 2) + 
                    Math.pow(block.y - relativeY, 2)
                );
                
                if (distance < 120) {
                    const intensity = 1 - (distance / 120);
                    
                    if (intensity > 0.7) {
                        block.element.classList.add('mouse-influence');
                    } else {
                        block.element.classList.remove('mouse-influence');
                    }
                } else {
                    block.element.classList.remove('mouse-influence');
                }
            });
            
            // Create mouse trail
            if (isMouseDown && Math.random() > 0.7) {
                createMouseTrail(relativeX, relativeY);
            }
        }

        function createMouseTrail(x, y) {
            const trail = document.createElement('div');
            trail.classList.add('wave-trail');
            trail.style.left = x + 'px';
            trail.style.top = y + 'px';
            hero.appendChild(trail);
            
            setTimeout(() => {
                trail.remove();
            }, 1000);
        }

        // Auto wave system
        function startAutoWaves() {
            setInterval(() => {
                if (!waveActive) {
                    const waveType = Math.random();
                    
                    if (waveType < 0.4) {
                        // Linear wave
                        const direction = Math.random() > 0.5 ? 'right' : 'left';
                        createLinearWave(direction, 60 + Math.random() * 40);
                    } else if (waveType < 0.8) {
                        // Circular wave
                        const centerRow = Math.floor(Math.random() * gridRows);
                        const centerCol = Math.floor(Math.random() * gridCols);
                        createCircularWave(centerRow, centerCol, 80 + Math.random() * 40);
                    } else {
                        // Spiral wave
                        const centerRow = Math.floor(gridRows / 2);
                        const centerCol = Math.floor(gridCols / 2);
                        createSpiralWave(centerRow, centerCol, 30 + Math.random() * 20);
                    }
                }
            }, 3000);
        }

        // Mouse click wave trigger
        hero.addEventListener('click', (e) => {
            const heroRect = hero.getBoundingClientRect();
            const relativeX = e.clientX - heroRect.left;
            const relativeY = e.clientY - heroRect.top;
            
            const clickRow = Math.floor(relativeY / 43);
            const clickCol = Math.floor(relativeX / 43);
            
            // Trigger immediate circular wave
            setTimeout(() => {
                createCircularWave(clickRow, clickCol, 60);
            }, 100);
        });

        // Smooth scrolling
        document.querySelectorAll('.cta-button').forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                document.getElementById('content').scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });

        // Animation loop
        function animate() {
            updateMouseInfluence();
            requestAnimationFrame(animate);
        }

        // Initialize
        createWaveGrid();
        startAutoWaves();
        animate();

        // Handle resize
        window.addEventListener('resize', () => {
            createWaveGrid();
        });

        // Initial wave
        setTimeout(() => {
            createSpiralWave(Math.floor(gridRows / 2), Math.floor(gridCols / 2), 40);
        }, 1000);
    </script>
</body>
</html>