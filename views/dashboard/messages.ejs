<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>User Messages | Skill Shastra</title>
  <meta name="description" content="User messaging interface for Skill Shastra." />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link rel="shortcut icon" href="/images/Logo_Black_Bg-2.png" type="image/x-icon" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/css/sidebar.css" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background: #f3f4f6;
      margin-left: 280px;
      transition: margin-left 0.3s ease;
      max-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow-x: hidden;
    }

    .main-content {
      margin-left: 0;
      width: 100%;
      animation: ColorChanger 10s ease-in 0s infinite alternate;
      overflow-y: auto;
      max-height: 100vh;
    }

    @keyframes ColorChanger {
      0% { background-color: #7c3aed; }
      20% { background-color: #a855f7; }
      50% { background-color: #ec4899; }
      100% { background-color: #f472b6; }
    }

    .chat-container {
      width: 100%;
      background: #ffffff;
      border-radius: 0px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
      display: flex;
      height: 100%;
      max-height: 100vh;
    }

    .user-list-container {
      width: 33.33%;
      background: #f9fafb;
      border-right: 1px solid #e5e7eb;
      border-radius: 16px 0 0 16px;
      display: flex;
      flex-direction: column;
    }

    .user-list-header {
      padding: 1.5rem;
      border-bottom: 1px solid #e5e7eb;
    }

    .user-list-header h2 {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1f2937;
    }

    .category-tabs {
      display: flex;
      border-bottom: 1px solid #e5e7eb;
      padding: 0.5rem 1.5rem;
    }

    .category-tab {
      flex: 1;
      text-align: center;
      padding: 0.5rem;
      font-size: 0.875rem;
      font-weight: 600;
      color: #6b7280;
      cursor: pointer;
      transition: color 0.2s, background 0.2s;
    }

    .category-tab.active {
      color: #4f46e5;
      border-bottom: 2px solid #4f46e5;
    }

    .category-tab:hover {
      color: #4338ca;
    }

    .user-list {
      flex: 1;
      overflow-y: auto;
    }

    .user-item {
      display: flex;
      align-items: center;
      padding: 1rem;
      cursor: pointer;
      border-bottom: 1px solid #e5e7eb;
      transition: background 0.2s;
    }

    .user-item:hover {
      background: #f3f4f6;
    }

    .user-item.selected {
      background: #e0e7ff;
    }

    .user-item img {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      margin-right: 1rem;
    }

    .user-item .user-info {
      flex: 1;
    }

    .user-item h3 {
      font-size: 1rem;
      font-weight: 600;
      color: #111827;
    }

    .user-item p {
      font-size: 0.875rem;
      color: #6b7280;
    }

    .user-item .message-time {
      font-size: 0.75rem;
      color: #6b7280;
      margin-left: auto;
    }

    .user-item .unread-count {
      margin-left: 0.5rem;
      background: #3b82f6;
      color: #ffffff;
      font-size: 0.75rem;
      font-weight: 700;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .chat-window-container {
      width: 66.67%;
      display: block;
      flex-direction: column;
    }

    .chat-window-container.active {
      display: flex;
    }

    .chat-header {
      padding: 1rem;
      border-bottom: 1px solid #e5e7eb;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .chat-header .user-info {
      display: flex;
      align-items: center;
    }

    .chat-header img {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      margin-right: 1rem;
    }

    .chat-header h3 {
      font-size: 1.125rem;
      font-weight: 600;
      color: #1f2937;
    }

    .chat-header .online-status {
      font-size: 0.875rem;
      color: #22c55e;
    }

    .chat-header .actions {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .action-button {
      background: #4f46e5;
      color: #ffffff;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background 0.2s;
    }

    .action-button:hover {
      background: #4338ca;
    }

    .action-button.back-button {
      background: #6b7280;
    }

    .action-button.back-button:hover {
      background: #4b5563;
    }

    .dropdown-menu {
      position: absolute;
      top: 3rem;
      right: 1rem;
      background: #ffffff;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      z-index: 10;
      display: none;
    }

    .dropdown-menu.active {
      display: block;
    }

    .dropdown-menu button {
      display: block;
      width: 100%;
      padding: 0.5rem 1rem;
      background: none;
      border: none;
      text-align: left;
      font-size: 0.875rem;
      color: #1f2937;
      cursor: pointer;
    }

    .dropdown-menu button:hover {
      background: #f3f4f6;
    }

    .chat-body {
      flex: 1;
      padding: 1.5rem;
      background: #f9fafb;
      background-image: url('/images/chat-background.png');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      overflow-y: auto;
    }

    .date-header {
      text-align: center;
      margin: 1rem auto;
      font-size: 0.875rem;
      color: #6b7280;
      background: #ffffff;
      padding: 0.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      width: fit-content;
    }

    .message {
      margin-bottom: 1rem;
      display: flex;
      position: relative;
    }

    .message.sent {
      justify-content: flex-end;
    }

    .message.received {
      justify-content: flex-start;
    }

    .message-content {
      max-width: 300px;
      padding: 0.75rem;
      border-radius: 8px;
      position: relative;
    }

    .message.sent .message-content {
      background: #4f46e5;
      color: #ffffff;
    }

    .message.received .message-content {
      background: #e5e7eb;
      color: #1f2937;
    }

    .message-content p {
      margin: 0;
    }

    .message-content img {
      max-width: 100%;
      border-radius: 8px;
      cursor: pointer;
    }

    .message-content audio {
      width: 100%;
      max-width: 200px;
      margin-top: 0.5rem;
    }

    .message-content .timestamp {
      font-size: 0.75rem;
      margin-top: 0.25rem;
      display: block;
    }

    .message.sent .timestamp {
      color: #e0e7ff;
    }

    .message.received .timestamp {
      color: #6b7280;
    }

    .read-receipt {
      position: absolute;
      bottom: 0.5rem;
      right: 0.5rem;
      display: flex;
      gap: 2px;
    }

    .read-receipt .dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: #6b7280;
    }

    .read-receipt.read .dot {
      background: #4f46e5;
    }

    .message-input-container {
      padding: 1rem;
      background: #ffffff;
      border-top: 1px solid #e5e7eb;
      border-radius: 0 0 16px 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .message-input-container .input-wrapper {
      display: flex;
      align-items: center;
      flex: 1;
    }

    .message-input {
      flex: 1;
      background: #f3f4f6;
      border-radius: 9999px;
      padding: 0.75rem 1.25rem;
      border: none;
      font-size: 1rem;
      outline: none;
    }

    .message-input:focus {
      box-shadow: 0 0 0 2px #818cf8;
    }

    .attach-button, .voice-button, .send-button {
      background: #4f46e5;
      color: #ffffff;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background 0.2s;
    }

    .voice-button.recording {
      background: #ef4444;
    }

    .attach-button:hover, .voice-button:hover, .send-button:hover {
      background: #4338ca;
    }

    .voice-button.recording:hover {
      background: #dc2626;
    }

    .toast {
      position: fixed;
      top: 20px;
      right: 20px;
      background: #ef4444;
      color: #ffffff;
      padding: 1rem;
      border-radius: 5px;
      display: none;
      z-index: 1000;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: #ffffff;
      padding: 2rem;
      border-radius: 8px;
      max-width: 400px;
      width: 100%;
      text-align: center;
    }

    .modal-content img {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      margin-bottom: 1rem;
    }

    .modal-content h2 {
      font-size: 1.5rem;
      color: #1f2937;
      margin-bottom: 0.5rem;
    }

    .modal-content p {
      font-size: 1rem;
      color: #6b7280;
      margin-bottom: 1rem;
    }

    .modal-content button {
      background: #4f46e5;
      color: #ffffff;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .modal-content button:hover {
      background: #4338ca;
    }

    .image-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .image-modal img {
      max-width: 90%;
      max-height: 90%;
      border-radius: 8px;
    }

    @media (max-width: 768px) {
      body {
        margin-left: 0;
      }

      .chat-container {
        flex-direction: column;
        height: auto;
        margin: 0;
      }

      .user-list-container {
        width: 100%;
        border-right: none;
        border-bottom: none;
        border-radius: 0;
        display: block;
      }

      .chat-window-container {
        width: 100%;
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        background: #ffffff;
      }

      .chat-window-container.active {
        display: flex;
      }
    }
  </style>
</head>
<body>
  <%- include('../partials/sidebar') %>
  <main class="main-content" id="main-content">
    <div class="chat-container">
      <div class="user-list-container" id="userListContainer">
        <div class="user-list-header">
          <h2>Messages</h2>
        </div>
        <div class="category-tabs">
          <div class="category-tab active" data-category="all">All</div>
          <div class="category-tab" data-category="unread">Unread</div>
          <div class="category-tab" data-category="favorites">Favorites</div>
        </div>
        <div class="user-list" id="userList"></div>
      </div>
      <div class="chat-window-container" id="chatWindowContainer">
        <div class="chat-header">
          <div class="user-info" id="chatHeaderUser">
            <button class="action-button back-button" id="backButton">
              <span class="material-icons">arrow_back</span>
            </button>
            <img src="https://www.gravatar.com/avatar/?d=retro" alt="User avatar" id="chatHeaderAvatar" />
            <div>
              <h3 id="chatHeaderName">Select a user</h3>
              <p class="online-status">Online</p>
            </div>
          </div>
          <div class="actions">
            <button class="action-button" id="searchButton">
              <span class="material-icons">search</span>
            </button>
            <button class="action-button" id="moreOptions">
              <span class="material-icons">more_vert</span>
            </button>
            <div class="dropdown-menu" id="dropdownMenu">
              <button id="toggleFavoriteBtn">Add to Favorites</button>
              <button id="clearChatsBtn">Clear Chats</button>
              <button id="viewProfileBtn">View Profile</button>
            </div>
          </div>
        </div>
        <div class="chat-body" id="chatWindow"></div>
        <div class="message-input-container">
          <button class="attach-button" id="attachButton">
            <span class="material-icons">attach_file</span>
          </button>
          <input type="file" id="imageInput" accept="image/png,image/jpeg" style="display: none;" />
          <button class="voice-button" id="voiceButton">
            <span class="material-icons">mic</span>
          </button>
          <div class="input-wrapper">
            <input type="text" id="messageInput" class="message-input" placeholder="Type your message..." />
          </div>
          <button id="sendButton" class="send-button">
            <span class="material-icons">send</span>
          </button>
        </div>
      </div>
    </div>
    <div id="toast" class="toast"></div>
    <div id="profileModal" class="modal">
      <div class="modal-content">
        <img id="modalAvatar" src="https://www.gravatar.com/avatar/?d=retro" alt="User avatar" />
        <h2 id="modalName"></h2>
        <p id="modalEmail"></p>
        <p id="modalRole"></p>
        <button id="closeModal">Close</button>
      </div>
    </div>
    <div id="imageModal" class="image-modal">
      <img id="enlargedImage" src="" alt="Enlarged image" />
    </div>
  </main>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.0/socket.io.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.4.0/purify.min.js"></script>
  <script src="/js/sidebar.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const user = JSON.parse(localStorage.getItem("user") || "{}");
      const token = localStorage.getItem("token");
      const userId = "<%= user._id || '' %>";
      const userName = "<%= user.name || '' %>";
      if (!user.name || !user.email || !token || !userId || !userName) {
        showToast("Please log in to access this page.");
        setTimeout(() => {
          window.location.href = "/signup?redirect=" + encodeURIComponent(window.location.pathname);
        }, 1000);
        return;
      }
      if (user.role !== "user") {
        showToast("This page is for users only.");
        setTimeout(() => {
          window.location.href = "/";
        }, 1000);
        return;
      }

      const sidebar = document.querySelector(".sidebar");
      const mainContent = document.querySelector(".main-content");
      if (sidebar && mainContent) {
        if (sidebar.classList.contains("hidden")) {
          mainContent.classList.add("full");
        }
        sidebar.addEventListener("transitionend", () => {
          mainContent.classList.toggle("full", sidebar.classList.contains("hidden"));
        });
      }

      const socket = io(window.location.origin, {
        auth: { token },
        transports: ["websocket", "polling"],
        reconnection: true,
        reconnectionAttempts: 5,
        reconnectionDelay: 1000,
        maxHttpBufferSize: 10 * 1024 * 1024,
      });

      const userList = document.getElementById("userList");
      const chatWindow = document.getElementById("chatWindow");
      const messageInput = document.getElementById("messageInput");
      const sendButton = document.getElementById("sendButton");
      const attachButton = document.getElementById("attachButton");
      const voiceButton = document.getElementById("voiceButton");
      const imageInput = document.getElementById("imageInput");
      const chatHeaderName = document.getElementById("chatHeaderName");
      const chatHeaderAvatar = document.getElementById("chatHeaderAvatar");
      const moreOptions = document.getElementById("moreOptions");
      const dropdownMenu = document.getElementById("dropdownMenu");
      const toggleFavoriteBtn = document.getElementById("toggleFavoriteBtn");
      const clearChatsBtn = document.getElementById("clearChatsBtn");
      const viewProfileBtn = document.getElementById("viewProfileBtn");
      const profileModal = document.getElementById("profileModal");
      const closeModal = document.getElementById("closeModal");
      const imageModal = document.getElementById("imageModal");
      const enlargedImage = document.getElementById("enlargedImage");
      const userListContainer = document.getElementById("userListContainer");
      const chatWindowContainer = document.getElementById("chatWindowContainer");
      const backButton = document.getElementById("backButton");
      let selectedUserId = localStorage.getItem("selectedUserId") || null;
      let currentCategory = "all";
      let pendingMessages = [];
      let isFavorite = false;
      let mediaRecorder = null;
      let audioChunks = [];

      function showToast(message) {
        const toast = document.getElementById("toast");
        toast.textContent = message;
        toast.style.display = "block";
        setTimeout(() => (toast.style.display = "none"), 3000);
      }

      function formatMessageTime(timestamp) {
        const now = new Date();
        const messageDate = new Date(timestamp);
        const diffDays = Math.floor((now - messageDate) / (1000 * 60 * 60 * 24));
        const isSameWeek = Math.floor((now.getDay() + 6) / 7) === Math.floor((messageDate.getDay() + 6) / 7);
        
        if (diffDays === 0) {
          return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        } else if (diffDays === 1) {
          return "Yesterday";
        } else if (isSameWeek) {
          return messageDate.toLocaleString('en-US', { weekday: 'long' });
        } else {
          return messageDate.toLocaleDateString();
        }
      }

      function sendMessage(content, messageType = "text", fileMetadata = {}, retryCount = 0) {
        if (!selectedUserId || !content) {
          showToast("Please select a user and enter a message or select a file.");
          console.log("Send failed: selectedUserId =", selectedUserId, "content =", content);
          return;
        }

        socket.emit("getUsers", (response) => {
          if (response.status === "success") {
            const selectedUser = response.users.find(u => u._id === selectedUserId);
            if (selectedUser) {
              if (messageType === "image" || messageType === "audio") {
                const base64Size = (content.length * 3) / 4 / 1024 / 1024;
                console.log(`File base64 size: ${base64Size.toFixed(2)}MB, Type: ${messageType}`);
                if (base64Size > 5) {
                  showToast(`${messageType} size exceeds 5MB after encoding.`);
                  console.log(`${messageType} too large after encoding:`, base64Size.toFixed(2), "MB");
                  return;
                }
              }

              console.log(`Sending ${messageType} to ${selectedUserId}, Content length: ${content.length}, Retry: ${retryCount}`);
              socket.emit("sendMessage", { 
                receiverId: selectedUserId, 
                content, 
                messageType,
                fileName: fileMetadata.fileName || "file",
                fileSize: fileMetadata.fileSize || 0,
                fileType: fileMetadata.fileType || ""
              }, (response) => {
                if (response.status === "success") {
                  messageInput.value = "";
                  imageInput.value = "";
                  console.log(`${messageType} sent successfully: ID: ${response.messageId}`);
                  socket.emit("getMessages", { userId: selectedUserId }, (msgResponse) => {
                    if (msgResponse.status === "success") {
                      displayMessages(msgResponse.messages);
                    } else {
                      showToast("Failed to refresh messages: " + msgResponse.message);
                    }
                  });
                } else {
                  console.error(`Send ${messageType} failed:`, response.message, "Response:", response);
                  showToast(`Failed to send ${messageType}: ${response.message}`);
                  if (retryCount < 2 && (messageType === "image" || messageType === "audio")) {
                    console.log(`Retrying ${messageType} send, attempt ${retryCount + 1}`);
                    setTimeout(() => sendMessage(content, messageType, fileMetadata, retryCount + 1), 2000);
                  } else {
                    showToast(`Failed to send ${messageType} after ${retryCount + 1} attempts: ${response.message}`);
                  }
                }
              });
            } else {
              showToast("Selected user not found.");
              console.error("Send failed: selected user not found");
            }
          } else {
            showToast("Failed to verify user: " + response.message);
            console.error("Verify user failed:", response.message);
          }
        });
      }

      sendButton.addEventListener("click", () => sendMessage(messageInput.value.trim()));

      messageInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          sendMessage(messageInput.value.trim());
        }
      });

      attachButton.addEventListener("click", () => imageInput.click());

      imageInput.addEventListener("change", () => {
        const file = imageInput.files[0];
        if (file) {
          if (!["image/png", "image/jpeg"].includes(file.type)) {
            showToast("Only PNG and JPEG images are allowed.");
            console.log("Invalid file type:", file.type);
            return;
          }
          if (file.size > 5 * 1024 * 1024) {
            showToast("Image size must be less than 5MB.");
            console.log("File too large:", file.size / 1024 / 1024, "MB");
            return;
          }
          console.log(`Selected image: ${file.name}, Size: ${(file.size / 1024 / 1024).toFixed(2)}MB, Type: ${file.type}`);
          const reader = new FileReader();
          reader.onload = () => {
            const base64 = reader.result;
            sendMessage(base64, "image", {
              fileName: file.name,
              fileSize: file.size,
              fileType: file.type
            });
          };
          reader.onerror = () => {
            showToast("Failed to read image file.");
            console.error("FileReader error:", reader.error);
          };
          reader.readAsDataURL(file);
        }
      });

      voiceButton.addEventListener("mousedown", () => {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
          showToast("Voice recording is not supported in this browser.");
          return;
        }
        navigator.mediaDevices.getUserMedia({ audio: true })
          .then(stream => {
            mediaRecorder = new MediaRecorder(stream, { mimeType: "audio/webm" });
            audioChunks = [];
            mediaRecorder.start();
            voiceButton.classList.add("recording");
            console.log("Started recording");
            mediaRecorder.ondataavailable = (e) => {
              audioChunks.push(e.data);
            };
            mediaRecorder.onstop = () => {
              const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
              if (audioBlob.size > 5 * 1024 * 1024) {
                showToast("Voice message size must be less than 5MB.");
                console.log("Audio too large:", audioBlob.size / 1024 / 1024, "MB");
                stream.getTracks().forEach(track => track.stop());
                voiceButton.classList.remove("recording");
                return;
              }
              const reader = new FileReader();
              reader.onload = () => {
                const base64 = reader.result;
                sendMessage(base64, "audio", {
                  fileName: `voice_${Date.now()}.webm`,
                  fileSize: audioBlob.size,
                  fileType: "audio/webm"
                });
              };
              reader.onerror = () => {
                showToast("Failed to process voice message.");
                console.error("FileReader error:", reader.error);
              };
              reader.readAsDataURL(audioBlob);
              stream.getTracks().forEach(track => track.stop());
              voiceButton.classList.remove("recording");
              console.log("Stopped recording");
            };
          })
          .catch(err => {
            showToast("Failed to access microphone.");
            console.error("Microphone access error:", err);
          });
      });

      voiceButton.addEventListener("mouseup", () => {
        if (mediaRecorder && mediaRecorder.state === "recording") {
          mediaRecorder.stop();
        }
      });

      voiceButton.addEventListener("mouseleave", () => {
        if (mediaRecorder && mediaRecorder.state === "recording") {
          mediaRecorder.stop();
        }
      });

      moreOptions.addEventListener("click", () => {
        dropdownMenu.classList.toggle("active");
      });

      document.addEventListener("click", (e) => {
        if (!dropdownMenu.contains(e.target) && !moreOptions.contains(e.target)) {
          dropdownMenu.classList.remove("active");
        }
      });

      toggleFavoriteBtn.addEventListener("click", () => {
        if (selectedUserId) {
          socket.emit("toggleFavorite", { userId: selectedUserId }, (response) => {
            if (response.status === "success") {
              isFavorite = response.isFavorite;
              toggleFavoriteBtn.textContent = isFavorite ? "Remove from Favorites" : "Add to Favorites";
              showToast(isFavorite ? "Added to Favorites" : "Removed from Favorites");
              socket.emit("getUsers", (res) => {
                if (res.status === "success") {
                  updateUserList(res.users);
                  if (selectedUserId) {
                    const user = res.users.find(u => u._id === selectedUserId);
                    if (user) selectUser(user);
                  }
                }
              });
            } else {
              showToast("Failed to toggle favorite: " + response.message);
              console.error("Toggle favorite failed:", response.message);
            }
          });
        } else {
          showToast("Please select a user.");
        }
      });

      clearChatsBtn.addEventListener("click", () => {
        if (selectedUserId) {
          if (confirm("Are you sure you want to clear chats with this user?")) {
            socket.emit("clearChats", { userId: selectedUserId }, (response) => {
              if (response.status === "success") {
                showToast("Chats cleared successfully");
                chatWindow.innerHTML = "";
                chatWindow.dataset.lastDate = null;
              } else {
                showToast("Failed to clear chats: " + response.message);
              }
            });
          }
        } else {
          showToast("Please select a user.");
        }
      });

      viewProfileBtn.addEventListener("click", () => {
        if (selectedUserId) {
          socket.emit("getUserProfile", { userId: selectedUserId }, (response) => {
            if (response.status === "success") {
              document.getElementById("modalAvatar").src = DOMPurify.sanitize(response.user.profileImage);
              document.getElementById("modalName").textContent = DOMPurify.sanitize(response.user.name);
              document.getElementById("modalEmail").textContent = DOMPurify.sanitize(response.user.email);
              document.getElementById("modalRole").textContent = DOMPurify.sanitize(response.user.role.charAt(0).toUpperCase() + response.user.role.slice(1));
              profileModal.style.display = "flex";
            } else {
              showToast("Failed to fetch profile: " + response.message);
            }
          });
        } else {
          showToast("Please select a user.");
        }
      });

      closeModal.addEventListener("click", () => {
        profileModal.style.display = "none";
      });

      imageModal.addEventListener("click", () => {
        imageModal.style.display = "none";
      });

      chatWindow.addEventListener("click", (e) => {
        if (e.target.tagName === "IMG") {
          enlargedImage.src = DOMPurify.sanitize(e.target.src);
          imageModal.style.display = "flex";
        }
      });

      backButton.addEventListener("click", () => {
        chatWindowContainer.classList.remove("active");
        userListContainer.style.display = "block";
      });

      socket.emit("getUsers", (response) => {
        if (response.status === "success") {
          console.log("Received users:", response.users);
          updateUserList(response.users);
          if (selectedUserId) {
            const user = response.users.find(u => u._id === selectedUserId);
            if (user) {
              selectUser(user);
              if (window.innerWidth <= 768) {
                userListContainer.style.display = "none";
                chatWindowContainer.classList.add("active");
              }
            } else {
              selectedUserId = null;
              localStorage.removeItem("selectedUserId");
            }
          }
        } else {
          showToast("Failed to fetch users: " + response.message);
          console.error("Fetch users failed:", response.message);
        }
      });

      document.querySelectorAll(".category-tab").forEach(tab => {
        tab.addEventListener("click", () => {
          document.querySelectorAll(".category-tab").forEach(t => t.classList.remove("active"));
          tab.classList.add("active");
          currentCategory = tab.dataset.category;
          console.log("Switched to category:", currentCategory);
          socket.emit("getUsers", (response) => {
            if (response.status === "success") {
              updateUserList(response.users);
            }
          });
        });
      });

      function updateUserList(users) {
        userList.innerHTML = "";
        let filteredUsers = users;
        if (currentCategory === "unread") {
          filteredUsers = users.filter(u => u.unreadCount > 0);
        } else if (currentCategory === "favorites") {
          filteredUsers = users.filter(u => u.isFavorite);
        }
        filteredUsers.forEach((u) => {
          const userItem = document.createElement("div");
          userItem.className = `user-item${u._id === selectedUserId ? " selected" : ""}`;
          userItem.dataset.userId = u._id;
          userItem.innerHTML = `
            <img src="${DOMPurify.sanitize(u.profileImage || 'https://www.gravatar.com/avatar/?d=retro')}" alt="User avatar" />
            <div class="user-info">
              <h3>${DOMPurify.sanitize(u.name)}</h3>
              <p>${DOMPurify.sanitize(u.role)}</p>
            </div>
            <span class="message-time">${u.lastMessageTime ? formatMessageTime(u.lastMessageTime) : ''}</span>
            ${u.unreadCount > 0 ? `<span class="unread-count">${u.unreadCount}</span>` : ""}
          `;
          userItem.addEventListener("click", () => {
            selectedUserId = u._id;
            localStorage.setItem("selectedUserId", selectedUserId);
            console.log("Selected user ID:", selectedUserId);
            selectUser(u);
            if (window.innerWidth <= 768) {
              userListContainer.style.display = "none";
              chatWindowContainer.classList.add("active");
            }
          });
          userList.appendChild(userItem);
        });
      }

      function selectUser(user) {
        document.querySelectorAll(".user-item").forEach((item) => item.classList.remove("selected"));
        const userItem = document.querySelector(`.user-item[data-user-id="${user._id}"]`);
        if (userItem) userItem.classList.add("selected");
        chatHeaderName.textContent = DOMPurify.sanitize(user.name);
        chatHeaderAvatar.src = DOMPurify.sanitize(user.profileImage || 'https://www.gravatar.com/avatar/?d=retro');
        toggleFavoriteBtn.textContent = user.isFavorite ? "Remove from Favorites" : "Add to Favorites";
        isFavorite = user.isFavorite;
        chatWindow.innerHTML = "";
        chatWindow.dataset.lastDate = null;
        socket.emit("getMessages", { userId: user._id }, (response) => {
          if (response.status === "success") {
            console.log("Received messages:", response.messages);
            displayMessages(response.messages);
            pendingMessages = pendingMessages.filter(msg => {
              if (
                (msg.sender.id === user._id && msg.receiver.id === userId) ||
                (msg.sender.id === userId && msg.receiver.id === user._id)
              ) {
                appendMessage(
                  msg.sender.id === userId,
                  msg.sender.name,
                  msg.content,
                  msg.createdAt,
                  msg.messageId,
                  msg.messageType,
                  msg.isRead,
                  msg.fileMetadata
                );
                return false;
              }
              return true;
            });
          } else {
            showToast("Failed to fetch messages: " + response.message);
            console.error("Fetch messages failed:", response.message);
          }
        });
      }

      socket.on("updateUsers", (response) => {
        console.log("Updating user list:", response.users);
        updateUserList(response.users);
        if (selectedUserId) {
          const user = response.users.find(u => u._id === selectedUserId);
          if (user) {
            document.querySelectorAll(".user-item").forEach((item) => item.classList.remove("selected"));
            const userItem = document.querySelector(`.user-item[data-user-id="${selectedUserId}"]`);
            if (userItem) userItem.classList.add("selected");
            toggleFavoriteBtn.textContent = user.isFavorite ? "Remove from Favorites" : "Add to Favorites";
            isFavorite = user.isFavorite;
          } else {
            selectedUserId = null;
            localStorage.removeItem("selectedUserId");
            chatHeaderName.textContent = "Select a user";
            chatHeaderAvatar.src = "https://www.gravatar.com/avatar/?d=retro";
            chatWindow.innerHTML = "";
            chatWindowContainer.classList.remove("active");
            userListContainer.style.display = "block";
          }
        }
      });

      socket.on("updateMessages", (response) => {
        console.log("Updating messages:", response.messages);
        displayMessages(response.messages);
      });

      socket.on("receiveMessage", (msg) => {
        console.log("Received message:", msg, "Current selectedUserId:", selectedUserId, "userId:", userId);
        if (
          (msg.sender.id === selectedUserId && msg.receiver.id === userId) ||
          (msg.sender.id === userId && msg.receiver.id === selectedUserId)
        ) {
          appendMessage(
            msg.sender.id === userId,
            msg.sender.name,
            msg.content,
            msg.createdAt,
            msg.messageId,
            msg.messageType,
            msg.isRead,
            msg.fileMetadata
          );
        } else {
          console.log("Queuing message for later:", msg);
          pendingMessages.push(msg);
        }
      });

      socket.on("updateMessageStatus", (msg) => {
        console.log("Updating message status:", msg);
        const messageElement = document.querySelector(`.message[data-message-id="${msg.messageId}"]`);
        if (messageElement) {
          const readReceipt = messageElement.querySelector(".read-receipt");
          if (readReceipt) {
            readReceipt.className = `read-receipt ${msg.isRead ? "read" : ""}`;
          }
        }
      });

      function displayMessages(messages, append = false) {
        if (!append) {
          chatWindow.innerHTML = "";
          chatWindow.dataset.lastDate = null;
        }
        let lastDate = chatWindow.dataset.lastDate || null;
        messages.forEach((msg) => {
          const messageDate = new Date(msg.createdAt).toLocaleDateString();
          if (messageDate !== lastDate) {
            const dateHeader = document.createElement("div");
            dateHeader.className = "date-header";
            dateHeader.textContent = messageDate;
            chatWindow.appendChild(dateHeader);
            lastDate = messageDate;
          }
          appendMessage(
            msg.sender._id === userId,
            msg.sender.name,
            msg.content,
            msg.createdAt,
            msg._id || msg.messageId,
            msg.messageType,
            msg.isRead,
            msg.fileMetadata
          );
        });
        chatWindow.dataset.lastDate = lastDate;
        chatWindow.scrollTop = chatWindow.scrollHeight;
        console.log("Messages displayed:", messages.length);
      }

      function appendMessage(isSent, senderName, content, timestamp, messageId, messageType, isRead, fileMetadata) {
        if (document.querySelector(`.message[data-message-id="${messageId}"]`)) {
          console.log("Skipping duplicate message:", messageId);
          return;
        }
        const messageDate = new Date(timestamp).toLocaleDateString();
        const lastDate = chatWindow.dataset.lastDate || null;
        if (messageDate !== lastDate) {
          const dateHeader = document.createElement("div");
          dateHeader.className = "date-header";
          dateHeader.textContent = messageDate;
          chatWindow.appendChild(dateHeader);
          chatWindow.dataset.lastDate = messageDate;
        }
        const messageDiv = document.createElement("div");
        messageDiv.className = `message ${isSent ? "sent" : "received"}`;
        messageDiv.dataset.messageId = messageId;
        const messageContent = document.createElement("div");
        messageContent.className = "message-content";
        if (messageType === "image") {
          messageContent.innerHTML = `
            <img src="${DOMPurify.sanitize(content)}" alt="Shared image" style="max-width: 100%; border-radius: 8px;" />
            <span class="timestamp">${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
          `;
        } else if (messageType === "audio") {
          messageContent.innerHTML = `
            <audio controls src="${DOMPurify.sanitize(content)}"></audio>
            <span class="timestamp">${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
          `;
        } else {
          messageContent.innerHTML = `
            <p>${DOMPurify.sanitize(content)}</p>
            <span class="timestamp">${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
          `;
        }
        if (isSent) {
          const readReceipt = document.createElement("div");
          readReceipt.className = `read-receipt ${isRead ? "read" : ""}`;
          readReceipt.innerHTML = `
            <span class="dot"></span>
            <span class="dot"></span>
          `;
          messageContent.appendChild(readReceipt);
        }
        messageDiv.appendChild(messageContent);
        chatWindow.appendChild(messageDiv);
        chatWindow.scrollTop = chatWindow.scrollHeight;
        console.log("Message appended:", { isSent, senderName, messageType, messageId, isRead });
      }

      setInterval(() => {
        if (selectedUserId) {
          socket.emit("getMessages", { userId: selectedUserId }, (response) => {
            if (response.status === "success") {
              console.log("Periodic message check:", response.messages.length);
              displayMessages(response.messages);
            }
          });
        }
      }, 10000);

      socket.on("connect_error", (error) => {
        console.error("Socket.IO connection error:", error);
        showToast("Connection error: " + error.message);
        if (error.message.includes("Authentication error")) {
          localStorage.removeItem("token");
          localStorage.removeItem("user");
          localStorage.removeItem("selectedUserId");
          setTimeout(() => {
            window.location.href = "/signup?redirect=" + encodeURIComponent(window.location.pathname);
          }, 1000);
        }
      });

      socket.on("connect", () => {
        console.log("Socket.IO connected");
        socket.emit("rejoinRooms");
        socket.emit("getUsers", (response) => {
          if (response.status === "success") {
            updateUserList(response.users);
            if (selectedUserId) {
              const user = response.users.find(u => u._id === selectedUserId);
              if (user) {
                selectUser(user);
                if (window.innerWidth <= 768) {
                  userListContainer.style.display = "none";
                  chatWindowContainer.classList.add("active");
                }
              }
            }
          }
        });
      });

      socket.on("reconnect", (attempt) => {
        console.log(`Socket.IO reconnected after ${attempt} attempts`);
        socket.emit("rejoinRooms");
        socket.emit("getUsers", (response) => {
          if (response.status === "success") {
            updateUserList(response.users);
            if (selectedUserId) {
              const user = response.users.find(u => u._id === selectedUserId);
              if (user) {
                selectUser(user);
                if (window.innerWidth <= 768) {
                  userListContainer.style.display = "none";
                  chatWindowContainer.classList.add("active");
                }
              }
            }
          }
        });
      });
    });
  </script>
</body>
</html>