```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Messages | Skill Shastra</title>
  <link rel="stylesheet" href="/css/style.css" /> <!-- Adjust path to your CSS -->
  <style>
    .chat-container {
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
    }
    .user-list {
      width: 30%;
      float: left;
      border-right: 1px solid #ccc;
      padding: 10px;
      max-height: 400px;
      overflow-y: auto;
    }
    .chat-window {
      width: 65%;
      float: right;
      padding: 10px;
      max-height: 400px;
      overflow-y: auto;
    }
    .message {
      margin: 10px 0;
      padding: 10px;
      border-radius: 5px;
    }
    .message.sent {
      background-color: #d1e7dd;
      margin-left: 20%;
    }
    .message.received {
      background-color: #f8d7da;
      margin-right: 20%;
    }
    .message-input {
      width: 100%;
      padding: 10px;
      margin-top: 10px;
    }
    .send-button {
      padding: 10px 20px;
      margin-top: 10px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <h2>Messages</h2>
    <div class="user-list">
      <h3>Admins</h3>
      <select id="userSelect" size="10">
        <option value="">Select an admin</option>
      </select>
    </div>
    <div class="chat-window" id="chatWindow">
      <!-- Messages will be appended here -->
    </div>
    <input type="text" id="messageInput" class="message-input" placeholder="Type your message..." />
    <button id="sendButton" class="send-button">Send</button>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.0/socket.io.js"></script>
  <script>
    const socket = io("http://localhost:5000", {
      auth: { token: document.cookie.split("token=")[1]?.split(";")[0] },
    });

    const userSelect = document.getElementById("userSelect");
    const chatWindow = document.getElementById("chatWindow");
    const messageInput = document.getElementById("messageInput");
    const sendButton = document.getElementById("sendButton");

    // Fetch admins
    socket.emit("getUsers", (response) => {
      if (response.status === "success") {
        response.users.forEach((user) => {
          const option = document.createElement("option");
          option.value = user._id;
          option.textContent = `${user.name} (Admin)`;
          userSelect.appendChild(option);
        });
      } else {
        alert("Failed to fetch admins: " + response.message);
      }
    });

    // Load message history when an admin is selected
    userSelect.addEventListener("change", () => {
      const userId = userSelect.value;
      if (userId) {
        chatWindow.innerHTML = "";
        socket.emit("getMessages", { userId }, (response) => {
          if (response.status === "success") {
            response.messages.forEach((msg) => {
              appendMessage(
                msg.sender._id === "<%= user._id %>",
                msg.sender.name,
                msg.content,
                msg.createdAt
              );
            });
          } else {
            alert("Failed to fetch messages: " + response.message);
          }
        });
      }
    });

    // Send message
    sendButton.addEventListener("click", () => {
      const receiverId = userSelect.value;
      const content = messageInput.value.trim();
      if (receiverId && content) {
        socket.emit("sendMessage", { receiverId, content }, (response) => {
          if (response.status === "success") {
            messageInput.value = "";
            appendMessage(true, "<%= user.name %>", content, new Date());
          } else {
            alert("Failed to send message: " + response.message);
          }
        });
      }
    });

    // Receive real-time messages
    socket.on("receiveMessage", (msg) => {
      if (msg.sender.id === userSelect.value || msg.sender.id === "<%= user._id %>") {
        appendMessage(
          msg.sender.id === "<%= user._id %>",
          msg.sender.name,
          msg.content,
          msg.createdAt
        );
      }
    });

    // Append message to chat window
    function appendMessage(isSent, senderName, content, timestamp) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `message ${isSent ? "sent" : "received"}`;
      messageDiv.innerHTML = `<strong>${senderName}</strong>: ${content} <br><small>${new Date(
        timestamp
      ).toLocaleString()}</small>`;
      chatWindow.appendChild(messageDiv);
      chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    // Handle Socket.IO errors
    socket.on("connect_error", (error) => {
      console.error("Socket.IO connection error:", error);
      alert("Connection error: " + error.message);
    });
  </script>
</body>
</html>