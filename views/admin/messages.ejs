<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Messages | Skill Shastra</title>
    <meta
      name="description"
      content="Manage and send messages to users and admins at Skill Shastra."
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <link
      rel="shortcut icon"
      href="/images/Logo_Black_Bg-2.png"
      type="image/x-icon"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link rel="stylesheet" href="/css/sidebar.css" />
    <link rel="stylesheet" href="/css/footer.css" />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: "Poppins", sans-serif;
        background: linear-gradient(135deg, #f8f9ff 0%, #e8f0ff 100%);
        color: #1f2937;
        margin-left: 280px;
        transition: margin-left 0.3s ease;
        position: relative;
        overflow-x: hidden;
      }
      .main-content.full {
        margin-left: 0;
      }
      .chat-container {
        max-width: 800px;
        margin: 6rem auto;
        padding: 2rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      .chat-header {
        text-align: center;
      }
      .chat-header h2 {
        font-size: 2rem;
        font-weight: 600;
        background: linear-gradient(135deg, #7c3aed, #a855f7);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
      }
      .chat-body {
        display: flex;
        gap: 1rem;
        height: 400px;
      }
      .user-list {
        width: 30%;
        border-right: 1px solid #ccc;
        padding: 1rem;
        overflow-y: auto;
      }
      .user-list select {
        width: 100%;
        padding: 0.5rem;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 1rem;
      }
      .chat-window {
        width: 70%;
        padding: 1rem;
        overflow-y: auto;
        background: #f8f9ff;
        border-radius: 5px;
      }
      .message {
        margin: 0.5rem 0;
        padding: 0.75rem;
        border-radius: 5px;
        max-width: 80%;
      }
      .message.sent {
        background: linear-gradient(135deg, #d1e7dd, #a3e6c8);
        margin-left: auto;
        text-align: right;
      }
      .message.received {
        background: linear-gradient(135deg, #f8d7da, #f1b0b7);
        margin-right: auto;
      }
      .message strong {
        font-weight: 600;
      }
      .message small {
        font-size: 0.8rem;
        color: #6b7280;
      }
      .message-input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 1rem;
      }
      .send-button {
        padding: 0.75rem 1.5rem;
        background: linear-gradient(135deg, #7c3aed, #a855f7);
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 0.9rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      .send-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(124, 58, 237, 0.4);
      }
      @media (max-width: 768px) {
        body {
          margin-left: 0;
        }
        .chat-container {
          margin: 3rem 1rem;
          padding: 1rem;
        }
        .chat-body {
          flex-direction: column;
          height: auto;
        }
        .user-list,
        .chat-window {
          width: 100%;
        }
        .user-list {
          border-right: none;
          border-bottom: 1px solid #ccc;
        }
      }
    </style>
  </head>
  <body>
    <%- include('../partials/sidebar') %>
    <main class="main-content" id="main-content">
      <section class="chat-container">
        <div class="chat-header">
          <h2>Admin Messages</h2>
        </div>
        
        <div class="chat-body">
          <div class="user-list">
            <select id="userSelect" size="10">
              <option value="">Select a user</option>
            </select>
          </div>
          <div class="chat-window" id="chatWindow"></div>
        </div>
        <input
          type="text"
          id="messageInput"
          class="message-input"
          placeholder="Type your message..."
        />
        <button id="sendButton" class="send-button">Send</button>
      </section>
      <%- include('../partials/footer') %>
    </main>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.0/socket.io.js"></script>
    <script src="/js/sidebar.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const user = JSON.parse(localStorage.getItem("user") || "{}");
        const token = localStorage.getItem("token");
        if (!user.name || !user.email || !token) {
          alert("Please log in to access this page.");
          window.location.href =
            "/signup?redirect=" + encodeURIComponent(window.location.pathname);
          return;
        }

        // Update main content margin
        const sidebar = document.querySelector(".sidebar");
        const mainContent = document.querySelector(".main-content");
        if (sidebar && mainContent) {
          if (sidebar.classList.contains("hidden")) {
            mainContent.classList.add("full");
          }
          sidebar.addEventListener("transitionend", () => {
            mainContent.classList.toggle(
              "full",
              sidebar.classList.contains("hidden")
            );
          });
        }

        // Socket.IO connection
        const socket = io("http://localhost:5000", {
          auth: { token },
        });

        const userSelect = document.getElementById("userSelect");
        const chatWindow = document.getElementById("chatWindow");
        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");

        // Fetch users
        socket.emit("getUsers", (response) => {
          if (response.status === "success") {
            response.users.forEach((user) => {
              const option = document.createElement("option");
              option.value = user._id;
              option.textContent = `${user.name} (${user.role})`;
              userSelect.appendChild(option);
            });
          } else {
            alert("Failed to fetch users: " + response.message);
          }
        });

        // Load message history when a user is selected
        userSelect.addEventListener("change", () => {
          const userId = userSelect.value;
          if (userId) {
            chatWindow.innerHTML = "";
            socket.emit("getMessages", { userId }, (response) => {
              if (response.status === "success") {
                response.messages.forEach((msg) => {
                  appendMessage(
                    msg.sender._id === "<%= user._id %>",
                    msg.sender.name,
                    msg.content,
                    msg.createdAt
                  );
                });
              } else {
                alert("Failed to fetch messages: " + response.message);
              }
            });
          }
        });

        // Send message
        sendButton.addEventListener("click", () => {
          const receiverId = userSelect.value;
          const content = messageInput.value.trim();
          if (receiverId && content) {
            socket.emit("sendMessage", { receiverId, content }, (response) => {
              if (response.status === "success") {
                messageInput.value = "";
                appendMessage(true, "<%= user.name %>", content, new Date());
              } else {
                alert("Failed to send message: " + response.message);
              }
            });
          } else {
            alert("Please select a user and enter a message.");
          }
        });

        // Receive real-time messages
        socket.on("receiveMessage", (msg) => {
          if (
            msg.sender.id === userSelect.value ||
            msg.sender.id === "<%= user._id %>"
          ) {
            appendMessage(
              msg.sender.id === "<%= user._id %>",
              msg.sender.name,
              msg.content,
              msg.createdAt
            );
          }
        });

        // Append message to chat window
        function appendMessage(isSent, senderName, content, timestamp) {
          const messageDiv = document.createElement("div");
          messageDiv.className = `message ${isSent ? "sent" : "received"}`;
          messageDiv.innerHTML = `<strong>${senderName}</strong>: ${content} <br><small>${new Date(
            timestamp
          ).toLocaleString()}</small>`;
          chatWindow.appendChild(messageDiv);
          chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        // Handle Socket.IO errors
        socket.on("connect_error", (error) => {
          console.error("Socket.IO connection error:", error);
          alert("Connection error: " + error.message);
          if (error.message.includes("Authentication error")) {
            localStorage.removeItem("token");
            localStorage.removeItem("user");
            window.location.href =
              "/signup?redirect=" +
              encodeURIComponent(window.location.pathname);
          }
        });
      });
    </script>
  </body>
</html>
```
